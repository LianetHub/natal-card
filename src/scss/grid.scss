// Define variables for gutters
$gutter-x: 1.5rem !default;
$gutter-y: 2.81rem !default;
$gutter-x-mobile: rem(9) !default;
$gutter-y-mobile: rem(9) !default;

// Define breakpoints
$grid-breakpoints: (
	xxxl: 1919.98px,
	xxl: 1727.98px,
	xl: 1599.98px,
	lg: 1199.98px,
	md: 1023.98px,
	sm: 767.98px,
	xs: 575.98px,
) !default;

// Function to convert columns to percentage
@function percentage($value) {
	@return math.div($value, 1) * 100%;
}

// Function to get the minimum breakpoint value
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
	$min: map-get($breakpoints, $name);
	@return if($min != 0, $min, null);
}

// Mixin for media breakpoint up
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($name, $breakpoints);
	@if $min {
		@media (min-width: $min) {
			@content;
		}
	} @else {
		@content;
	}
}

// Mixin for row
@mixin make-row {
	display: flex;
	flex-wrap: wrap;
	margin-top: calc(-1 * var(--gutter-y));
	margin-right: calc(-0.5 * var(--gutter-x));
	margin-left: calc(-0.5 * var(--gutter-x));

	> * {
		flex-shrink: 0;
		width: 100%;
		max-width: 100%;
		padding-right: calc(var(--gutter-x) * 0.5);
		padding-left: calc(var(--gutter-x) * 0.5);
		margin-top: var(--gutter-y);
	}
}

// Mixin for columns
@mixin make-col($size) {
	flex: 0 0 percentage(math.div($size, 8));
	max-width: percentage(math.div($size, 8));
}

// Mixin for offsets
@mixin make-offset($size) {
	margin-left: percentage(math.div($size, 8));
}

// Mixin for order
@mixin make-order($order) {
	order: $order;
}

// Mixin for order-first
@mixin make-order-first {
	order: -1;
}

// Generate classes for 8-column grid with breakpoints
@mixin generate-grid {
	:root {
		--gutter-x: #{$gutter-x-mobile};
		--gutter-y: #{$gutter-y-mobile};
		@media (min-width: $md5) {
			--gutter-x: #{$gutter-x};
			--gutter-y: #{$gutter-y};
		}
	}
	.row {
		@include make-row;
	}

	@for $i from 1 through 8 {
		.col-#{$i} {
			@include make-col($i);
		}

		@each $breakpoint in map-keys($grid-breakpoints) {
			@include media-breakpoint-up($breakpoint) {
				.col-#{$breakpoint}-#{$i} {
					@include make-col($i);
				}
			}
		}
	}
}

@mixin generate-offset {
	@for $i from 0 through 8 {
		.offset-#{$i} {
			@include make-offset($i);
		}

		@each $breakpoint in map-keys($grid-breakpoints) {
			@include media-breakpoint-up($breakpoint) {
				.offset-#{$breakpoint}-#{$i} {
					@include make-offset($i);
				}
			}
		}
	}
}

// Generate classes for property order
@mixin generate-order {
	@for $i from 0 through 8 {
		.order-#{$i} {
			@include make-order($i);
		}

		@each $breakpoint in map-keys($grid-breakpoints) {
			@include media-breakpoint-up($breakpoint) {
				.order-#{$breakpoint}-#{$i} {
					@include make-order($i);
				}
			}
		}
	}

	.order-first {
		@include make-order-first;
	}

	@each $breakpoint in map-keys($grid-breakpoints) {
		@include media-breakpoint-up($breakpoint) {
			.order-#{$breakpoint}-first {
				@include make-order-first;
			}
		}
	}
}

// Include the grid mixin to generate the CSS
@include generate-grid;
@include generate-offset;
@include generate-order;
